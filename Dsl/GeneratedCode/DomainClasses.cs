//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.RICT
{
	/// <summary>
	/// DomainClass SoSA
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.RICT.SoSA.DisplayName", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.RICT.SoSA.Description", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.RICT.RICTDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("1f5e42a5-f546-4fc7-880f-5170770994c4")]
	public partial class SoSA : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SoSA domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1f5e42a5, 0xf546, 0x4fc7, 0x88, 0x0f, 0x51, 0x70, 0x77, 0x09, 0x94, 0xc4);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SoSA(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SoSA(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ImpactLevels opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ImpactLevels.
		/// Description for Company.RICT.SoSAHasImpactLevels.SoSA
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ImpactLevel> ImpactLevels
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ImpactLevel>, ImpactLevel>(global::Company.RICT.SoSAHasImpactLevels.SoSADomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.RICT.ImpactLevel.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.RICT.ImpactLevel sourceImpactLevel1 = sourceElement as global::Company.RICT.ImpactLevel;
			if (sourceImpactLevel1 != null)
			{
				// Create link for path SoSAHasImpactLevels.ImpactLevels
				this.ImpactLevels.Add(sourceImpactLevel1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.RICT.ImpactLevel sourceImpactLevel1 = sourceElement as global::Company.RICT.ImpactLevel;
			if (sourceImpactLevel1 != null)
			{
				// Delete link for path SoSAHasImpactLevels.ImpactLevels
				
				foreach (DslModeling::ElementLink link in global::Company.RICT.SoSAHasImpactLevels.GetLinks((global::Company.RICT.SoSA)this, sourceImpactLevel1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.RICT.SoSAHasImpactLevels.SoSADomainRoleId, global::Company.RICT.SoSAHasImpactLevels.ImpactLevelDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.RICT
{
	/// <summary>
	/// DomainClass Concern
	/// Elements embedded in the model. Appear as boxes on the diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.RICT.Concern.DisplayName", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.RICT.Concern.Description", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.RICT.RICTDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("fc20961a-f391-4eef-8f02-909cc93bb20b")]
	public partial class Concern : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Concern domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfc20961a, 0xf391, 0x4eef, 0x8f, 0x02, 0x90, 0x9c, 0xc9, 0x3b, 0xb2, 0x0b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Concern(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Concern(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x16f6a3c1, 0x20ba, 0x41c1, 0x90, 0xbd, 0xdf, 0xc1, 0xa0, 0x28, 0xc5, 0xc3);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.RICT.Concern.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT.Concern/Name.DisplayName", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT.Concern/Name.Description", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("16f6a3c1-20ba-41c1-90bd-dfc1a028c5c3")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Concern.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Concern, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Concern.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Concern.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Concern element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Concern element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TargetConcerns1 opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TargetConcerns1.
		/// Description for Company.RICT.ExampleRelationship.Target
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Concern> TargetConcerns1
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Concern>, Concern>(global::Company.RICT.UndecidedEffectConcern.SourceDomainRoleId);
			}
		}
		#endregion
		#region SourceConcerns1 opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SourceConcerns1.
		/// Description for Company.RICT.ExampleRelationship.Source
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Concern> SourceConcerns1
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Concern>, Concern>(global::Company.RICT.UndecidedEffectConcern.TargetDomainRoleId);
			}
		}
		#endregion
		#region ImpactLevel opposite domain role accessor
		/// <summary>
		/// Gets or sets ImpactLevel.
		/// Description for Company.RICT.ImpactLevelHasConcerns.Concern
		/// </summary>
		public virtual ImpactLevel ImpactLevel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.RICT.ImpactLevelHasConcerns.ConcernDomainRoleId) as ImpactLevel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.RICT.ImpactLevelHasConcerns.ConcernDomainRoleId, value);
			}
		}
		#endregion
		#region TargetConcerns2 opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TargetConcerns2.
		/// Description for Company.RICT.PositiveEffectConcern.SourceConcern
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Concern> TargetConcerns2
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Concern>, Concern>(global::Company.RICT.PositiveEffectConcern.SourceConcernDomainRoleId);
			}
		}
		#endregion
		#region SourceConcerns2 opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SourceConcerns2.
		/// Description for Company.RICT.PositiveEffectConcern.TargetConcern
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Concern> SourceConcerns2
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Concern>, Concern>(global::Company.RICT.PositiveEffectConcern.TargetConcernDomainRoleId);
			}
		}
		#endregion
		#region TargetConcerns3 opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TargetConcerns3.
		/// Description for Company.RICT.NegativeEffectConcern.SourceConcern
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Concern> TargetConcerns3
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Concern>, Concern>(global::Company.RICT.NegativeEffectConcern.SourceConcernDomainRoleId);
			}
		}
		#endregion
		#region SourceConcerns3 opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SourceConcerns3.
		/// Description for Company.RICT.NegativeEffectConcern.TargetConcern
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Concern> SourceConcerns3
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Concern>, Concern>(global::Company.RICT.NegativeEffectConcern.TargetConcernDomainRoleId);
			}
		}
		#endregion
		#region SoftwareArchitecture1 opposite domain role accessor
		/// <summary>
		/// Gets or sets SoftwareArchitecture1.
		/// Description for Company.RICT.UndecidedEffectSA.Concern
		/// </summary>
		public virtual SoftwareArchitecture SoftwareArchitecture1
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.RICT.UndecidedEffectSA.ConcernDomainRoleId) as SoftwareArchitecture;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.RICT.UndecidedEffectSA.ConcernDomainRoleId, value);
			}
		}
		#endregion
		#region SoftwareArchitecture2 opposite domain role accessor
		/// <summary>
		/// Gets or sets SoftwareArchitecture2.
		/// Description for Company.RICT.PositiveEffectSA.Concern
		/// </summary>
		public virtual SoftwareArchitecture SoftwareArchitecture2
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.RICT.PositiveEffectSA.ConcernDomainRoleId) as SoftwareArchitecture;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.RICT.PositiveEffectSA.ConcernDomainRoleId, value);
			}
		}
		#endregion
		#region SoftwareArchitecture3 opposite domain role accessor
		/// <summary>
		/// Gets or sets SoftwareArchitecture3.
		/// Description for Company.RICT.NegativeEffectSA.Concern
		/// </summary>
		public virtual SoftwareArchitecture SoftwareArchitecture3
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.RICT.NegativeEffectSA.ConcernDomainRoleId) as SoftwareArchitecture;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.RICT.NegativeEffectSA.ConcernDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.RICT
{
	/// <summary>
	/// DomainClass ImpactLevel
	/// Description for Company.RICT.ImpactLevel
	/// </summary>
	[DslDesign::DisplayNameResource("Company.RICT.ImpactLevel.DisplayName", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.RICT.ImpactLevel.Description", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.RICT.RICTDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("91abdf95-dc58-4229-8d83-30d72f734219")]
	public partial class ImpactLevel : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ImpactLevel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x91abdf95, 0xdc58, 0x4229, 0x8d, 0x83, 0x30, 0xd7, 0x2f, 0x73, 0x42, 0x19);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ImpactLevel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ImpactLevel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x866df40d, 0xad2f, 0x422f, 0x83, 0x04, 0x99, 0xf2, 0xe4, 0x82, 0x74, 0x2e);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.RICT.ImpactLevel.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT.ImpactLevel/Name.DisplayName", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT.ImpactLevel/Name.Description", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("866df40d-ad2f-422f-8304-99f2e482742e")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ImpactLevel.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ImpactLevel, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ImpactLevel.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ImpactLevel.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ImpactLevel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ImpactLevel element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SoSA opposite domain role accessor
		/// <summary>
		/// Gets or sets SoSA.
		/// Description for Company.RICT.SoSAHasImpactLevels.ImpactLevel
		/// </summary>
		public virtual SoSA SoSA
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.RICT.SoSAHasImpactLevels.ImpactLevelDomainRoleId) as SoSA;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.RICT.SoSAHasImpactLevels.ImpactLevelDomainRoleId, value);
			}
		}
		#endregion
		#region Concerns opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Concerns.
		/// Description for Company.RICT.ImpactLevelHasConcerns.ImpactLevel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Concern> Concerns
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Concern>, Concern>(global::Company.RICT.ImpactLevelHasConcerns.ImpactLevelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.RICT.Concern.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.RICT.Concern sourceConcern1 = sourceElement as global::Company.RICT.Concern;
			if (sourceConcern1 != null)
			{
				// Create link for path ImpactLevelHasConcerns.Concerns
				this.Concerns.Add(sourceConcern1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.RICT.Concern sourceConcern1 = sourceElement as global::Company.RICT.Concern;
			if (sourceConcern1 != null)
			{
				// Delete link for path ImpactLevelHasConcerns.Concerns
				
				foreach (DslModeling::ElementLink link in global::Company.RICT.ImpactLevelHasConcerns.GetLinks((global::Company.RICT.ImpactLevel)this, sourceConcern1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.RICT.ImpactLevelHasConcerns.ImpactLevelDomainRoleId, global::Company.RICT.ImpactLevelHasConcerns.ConcernDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.RICT
{
	/// <summary>
	/// DomainClass SystemicLevel
	/// Description for Company.RICT.SystemicLevel
	/// </summary>
	[DslDesign::DisplayNameResource("Company.RICT.SystemicLevel.DisplayName", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.RICT.SystemicLevel.Description", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.RICT.RICTDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("b20b5fd1-bad4-4bfb-a974-b76acd70ae1c")]
	public partial class SystemicLevel : ImpactLevel
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SystemicLevel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb20b5fd1, 0xbad4, 0x4bfb, 0xa9, 0x74, 0xb7, 0x6a, 0xcd, 0x70, 0xae, 0x1c);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SystemicLevel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SystemicLevel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Company.RICT
{
	/// <summary>
	/// DomainClass EnablingLevel
	/// Description for Company.RICT.EnablingLevel
	/// </summary>
	[DslDesign::DisplayNameResource("Company.RICT.EnablingLevel.DisplayName", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.RICT.EnablingLevel.Description", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.RICT.RICTDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("6d9e5726-c1e9-4eb5-8ba5-6b1a49c179e3")]
	public partial class EnablingLevel : ImpactLevel
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// EnablingLevel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6d9e5726, 0xc1e9, 0x4eb5, 0x8b, 0xa5, 0x6b, 0x1a, 0x49, 0xc1, 0x79, 0xe3);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EnablingLevel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EnablingLevel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Company.RICT
{
	/// <summary>
	/// DomainClass ImmediateLevel
	/// Description for Company.RICT.ImmediateLevel
	/// </summary>
	[DslDesign::DisplayNameResource("Company.RICT.ImmediateLevel.DisplayName", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.RICT.ImmediateLevel.Description", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.RICT.RICTDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("2db9c41c-046a-478a-87ce-bbc4f83a12bd")]
	public partial class ImmediateLevel : ImpactLevel
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ImmediateLevel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2db9c41c, 0x046a, 0x478a, 0x87, 0xce, 0xbb, 0xc4, 0xf8, 0x3a, 0x12, 0xbd);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ImmediateLevel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ImmediateLevel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SoftwareArchitectures opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SoftwareArchitectures.
		/// Description for
		/// Company.RICT.ImmediateLevelHasSoftwareArchitectures.ImmediateLevel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<SoftwareArchitecture> SoftwareArchitectures
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<SoftwareArchitecture>, SoftwareArchitecture>(global::Company.RICT.ImmediateLevelHasSoftwareArchitectures.ImmediateLevelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.RICT.SoftwareArchitecture.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.RICT.SoftwareArchitecture sourceSoftwareArchitecture1 = sourceElement as global::Company.RICT.SoftwareArchitecture;
			if (sourceSoftwareArchitecture1 != null)
			{
				// Create link for path ImmediateLevelHasSoftwareArchitectures.SoftwareArchitectures
				this.SoftwareArchitectures.Add(sourceSoftwareArchitecture1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.RICT.SoftwareArchitecture sourceSoftwareArchitecture1 = sourceElement as global::Company.RICT.SoftwareArchitecture;
			if (sourceSoftwareArchitecture1 != null)
			{
				// Delete link for path ImmediateLevelHasSoftwareArchitectures.SoftwareArchitectures
				
				foreach (DslModeling::ElementLink link in global::Company.RICT.ImmediateLevelHasSoftwareArchitectures.GetLinks((global::Company.RICT.ImmediateLevel)this, sourceSoftwareArchitecture1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.RICT.ImmediateLevelHasSoftwareArchitectures.ImmediateLevelDomainRoleId, global::Company.RICT.ImmediateLevelHasSoftwareArchitectures.SoftwareArchitectureDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.RICT
{
	/// <summary>
	/// DomainClass SoftwareArchitecture
	/// Description for Company.RICT.SoftwareArchitecture
	/// </summary>
	[DslDesign::DisplayNameResource("Company.RICT.SoftwareArchitecture.DisplayName", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.RICT.SoftwareArchitecture.Description", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.RICT.RICTDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("640c12fc-f7fd-459e-a364-e9de0b57d608")]
	public partial class SoftwareArchitecture : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SoftwareArchitecture domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x640c12fc, 0xf7fd, 0x459e, 0xa3, 0x64, 0xe9, 0xde, 0x0b, 0x57, 0xd6, 0x08);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SoftwareArchitecture(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SoftwareArchitecture(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x44cb497a, 0x15dc, 0x4c51, 0xb4, 0xd9, 0x06, 0xef, 0x79, 0x76, 0x03, 0xb2);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.RICT.SoftwareArchitecture.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT.SoftwareArchitecture/Name.DisplayName", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT.SoftwareArchitecture/Name.Description", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("44cb497a-15dc-4c51-b4d9-06ef797603b2")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SoftwareArchitecture.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<SoftwareArchitecture, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SoftwareArchitecture.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SoftwareArchitecture.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(SoftwareArchitecture element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SoftwareArchitecture element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ImmediateLevel opposite domain role accessor
		/// <summary>
		/// Gets or sets ImmediateLevel.
		/// Description for
		/// Company.RICT.ImmediateLevelHasSoftwareArchitectures.SoftwareArchitecture
		/// </summary>
		public virtual ImmediateLevel ImmediateLevel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.RICT.ImmediateLevelHasSoftwareArchitectures.SoftwareArchitectureDomainRoleId) as ImmediateLevel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.RICT.ImmediateLevelHasSoftwareArchitectures.SoftwareArchitectureDomainRoleId, value);
			}
		}
		#endregion
		#region TargetConcerns4 opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TargetConcerns4.
		/// Description for Company.RICT.UndecidedEffectSA.SoftwareArchitecture
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Concern> TargetConcerns4
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Concern>, Concern>(global::Company.RICT.UndecidedEffectSA.SoftwareArchitectureDomainRoleId);
			}
		}
		#endregion
		#region TargetConcerns5 opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TargetConcerns5.
		/// Description for Company.RICT.PositiveEffectSA.SoftwareArchitecture
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Concern> TargetConcerns5
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Concern>, Concern>(global::Company.RICT.PositiveEffectSA.SoftwareArchitectureDomainRoleId);
			}
		}
		#endregion
		#region TargetConcerns6 opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TargetConcerns6.
		/// Description for Company.RICT.NegativeEffectSA.SoftwareArchitecture
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Concern> TargetConcerns6
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Concern>, Concern>(global::Company.RICT.NegativeEffectSA.SoftwareArchitectureDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Company.RICT
{
	/// <summary>
	/// DomainClass SocialConcern
	/// Description for Company.RICT.SocialConcern
	/// </summary>
	[DslDesign::DisplayNameResource("Company.RICT.SocialConcern.DisplayName", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.RICT.SocialConcern.Description", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.RICT.RICTDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d28f3fba-523d-4a9b-8efb-42e6e3ef9415")]
	public partial class SocialConcern : Concern
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SocialConcern domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd28f3fba, 0x523d, 0x4a9b, 0x8e, 0xfb, 0x42, 0xe6, 0xe3, 0xef, 0x94, 0x15);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SocialConcern(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SocialConcern(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Company.RICT
{
	/// <summary>
	/// DomainClass TechnicalConcern
	/// Description for Company.RICT.TechnicalConcern
	/// </summary>
	[DslDesign::DisplayNameResource("Company.RICT.TechnicalConcern.DisplayName", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.RICT.TechnicalConcern.Description", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.RICT.RICTDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("007940fb-50ac-4d5a-875a-dc968988a2ff")]
	public partial class TechnicalConcern : Concern
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TechnicalConcern domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x007940fb, 0x50ac, 0x4d5a, 0x87, 0x5a, 0xdc, 0x96, 0x89, 0x88, 0xa2, 0xff);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TechnicalConcern(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TechnicalConcern(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Company.RICT
{
	/// <summary>
	/// DomainClass EnvironmentalConcern
	/// Description for Company.RICT.EnvironmentalConcern
	/// </summary>
	[DslDesign::DisplayNameResource("Company.RICT.EnvironmentalConcern.DisplayName", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.RICT.EnvironmentalConcern.Description", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.RICT.RICTDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a9cdb2c7-84d2-4748-a919-b1cac7c5cb32")]
	public partial class EnvironmentalConcern : Concern
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// EnvironmentalConcern domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa9cdb2c7, 0x84d2, 0x4748, 0xa9, 0x19, 0xb1, 0xca, 0xc7, 0xc5, 0xcb, 0x32);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EnvironmentalConcern(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EnvironmentalConcern(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Company.RICT
{
	/// <summary>
	/// DomainClass EconomicConcern
	/// Description for Company.RICT.EconomicConcern
	/// </summary>
	[DslDesign::DisplayNameResource("Company.RICT.EconomicConcern.DisplayName", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.RICT.EconomicConcern.Description", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.RICT.RICTDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("971f3e52-84ba-4c7e-b9c0-e2b9fc0399cf")]
	public partial class EconomicConcern : Concern
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// EconomicConcern domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x971f3e52, 0x84ba, 0x4c7e, 0xb9, 0xc0, 0xe2, 0xb9, 0xfc, 0x03, 0x99, 0xcf);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EconomicConcern(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EconomicConcern(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
