//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;
namespace Company.RICT
{
	/// <summary>
	/// DomainModel RICTDomainModel
	/// Description for Company.RICT.RICT
	/// </summary>
	[DslDesign::DisplayNameResource("Company.RICT.RICTDomainModel.DisplayName", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.RICT.RICTDomainModel.Description", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DependsOnDomainModel(typeof(global::Microsoft.VisualStudio.Modeling.CoreDomainModel))]
	[DslModeling::DependsOnDomainModel(typeof(global::Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModel))]
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
	[DslModeling::DomainObjectId("1379d070-16cd-40f8-a3c8-392a792ba57a")]
	public partial class RICTDomainModel : DslModeling::DomainModel
	{
		#region Constructor, domain model Id
	
		/// <summary>
		/// RICTDomainModel domain model Id.
		/// </summary>
		public static readonly global::System.Guid DomainModelId = new global::System.Guid(0x1379d070, 0x16cd, 0x40f8, 0xa3, 0xc8, 0x39, 0x2a, 0x79, 0x2b, 0xa5, 0x7a);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="store">Store containing the domain model.</param>
		public RICTDomainModel(DslModeling::Store store)
			: base(store, DomainModelId)
		{
			// Call the partial method to allow any required serialization setup to be done.
			this.InitializeSerialization(store);		
		}
		
	
		///<Summary>
		/// Defines a partial method that will be called from the constructor to
		/// allow any necessary serialization setup to be done.
		///</Summary>
		///<remarks>
		/// For a DSL created with the DSL Designer wizard, an implementation of this 
		/// method will be generated in the GeneratedCode\SerializationHelper.cs class.
		///</remarks>
		partial void InitializeSerialization(DslModeling::Store store);
	
	
		#endregion
		#region Domain model reflection
			
		/// <summary>
		/// Gets the list of generated domain model types (classes, rules, relationships).
		/// </summary>
		/// <returns>List of types.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override global::System.Type[] GetGeneratedDomainModelTypes()
		{
			return new global::System.Type[]
			{
				typeof(SoSA),
				typeof(Concern),
				typeof(ImpactLevel),
				typeof(SystemicLevel),
				typeof(EnablingLevel),
				typeof(ImmediateLevel),
				typeof(SoftwareArchitecture),
				typeof(SocialConcern),
				typeof(TechnicalConcern),
				typeof(EnvironmentalConcern),
				typeof(EconomicConcern),
				typeof(UndecidedEffectConcern),
				typeof(SoSAHasImpactLevels),
				typeof(ImpactLevelHasConcerns),
				typeof(ImmediateLevelHasSoftwareArchitectures),
				typeof(PositiveEffectConcern),
				typeof(NegativeEffectConcern),
				typeof(UndecidedEffectSA),
				typeof(PositiveEffectSA),
				typeof(NegativeEffectSA),
				typeof(RICTDiagram),
				typeof(sUndecidedEffect),
				typeof(sPositiveEffect),
				typeof(sNegativeEffect),
				typeof(sConcern),
				typeof(sSystematicLevel),
				typeof(sEnablingLevel),
				typeof(sImmediateLevel),
				typeof(sSoftwareArchitecture),
				typeof(sSocialConcern),
				typeof(sTechnicalConcern),
				typeof(sEnvironmentalConcern),
				typeof(sEconomicConcern),
				typeof(global::Company.RICT.FixUpDiagram),
				typeof(global::Company.RICT.ConnectorRolePlayerChanged),
			};
		}
		/// <summary>
		/// Gets the list of generated domain properties.
		/// </summary>
		/// <returns>List of property data.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override DomainMemberInfo[] GetGeneratedDomainProperties()
		{
			return new DomainMemberInfo[]
			{
				new DomainMemberInfo(typeof(Concern), "Name", Concern.NameDomainPropertyId, typeof(Concern.NamePropertyHandler)),
				new DomainMemberInfo(typeof(ImpactLevel), "Name", ImpactLevel.NameDomainPropertyId, typeof(ImpactLevel.NamePropertyHandler)),
				new DomainMemberInfo(typeof(SoftwareArchitecture), "Name", SoftwareArchitecture.NameDomainPropertyId, typeof(SoftwareArchitecture.NamePropertyHandler)),
			};
		}
		/// <summary>
		/// Gets the list of generated domain roles.
		/// </summary>
		/// <returns>List of role data.</returns>
		protected sealed override DomainRolePlayerInfo[] GetGeneratedDomainRoles()
		{
			return new DomainRolePlayerInfo[]
			{
				new DomainRolePlayerInfo(typeof(UndecidedEffectConcern), "Source", UndecidedEffectConcern.SourceDomainRoleId),
				new DomainRolePlayerInfo(typeof(UndecidedEffectConcern), "Target", UndecidedEffectConcern.TargetDomainRoleId),
				new DomainRolePlayerInfo(typeof(SoSAHasImpactLevels), "SoSA", SoSAHasImpactLevels.SoSADomainRoleId),
				new DomainRolePlayerInfo(typeof(SoSAHasImpactLevels), "ImpactLevel", SoSAHasImpactLevels.ImpactLevelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ImpactLevelHasConcerns), "ImpactLevel", ImpactLevelHasConcerns.ImpactLevelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ImpactLevelHasConcerns), "Concern", ImpactLevelHasConcerns.ConcernDomainRoleId),
				new DomainRolePlayerInfo(typeof(ImmediateLevelHasSoftwareArchitectures), "ImmediateLevel", ImmediateLevelHasSoftwareArchitectures.ImmediateLevelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ImmediateLevelHasSoftwareArchitectures), "SoftwareArchitecture", ImmediateLevelHasSoftwareArchitectures.SoftwareArchitectureDomainRoleId),
				new DomainRolePlayerInfo(typeof(PositiveEffectConcern), "SourceConcern", PositiveEffectConcern.SourceConcernDomainRoleId),
				new DomainRolePlayerInfo(typeof(PositiveEffectConcern), "TargetConcern", PositiveEffectConcern.TargetConcernDomainRoleId),
				new DomainRolePlayerInfo(typeof(NegativeEffectConcern), "SourceConcern", NegativeEffectConcern.SourceConcernDomainRoleId),
				new DomainRolePlayerInfo(typeof(NegativeEffectConcern), "TargetConcern", NegativeEffectConcern.TargetConcernDomainRoleId),
				new DomainRolePlayerInfo(typeof(UndecidedEffectSA), "SoftwareArchitecture", UndecidedEffectSA.SoftwareArchitectureDomainRoleId),
				new DomainRolePlayerInfo(typeof(UndecidedEffectSA), "Concern", UndecidedEffectSA.ConcernDomainRoleId),
				new DomainRolePlayerInfo(typeof(PositiveEffectSA), "SoftwareArchitecture", PositiveEffectSA.SoftwareArchitectureDomainRoleId),
				new DomainRolePlayerInfo(typeof(PositiveEffectSA), "Concern", PositiveEffectSA.ConcernDomainRoleId),
				new DomainRolePlayerInfo(typeof(NegativeEffectSA), "SoftwareArchitecture", NegativeEffectSA.SoftwareArchitectureDomainRoleId),
				new DomainRolePlayerInfo(typeof(NegativeEffectSA), "Concern", NegativeEffectSA.ConcernDomainRoleId),
			};
		}
		#endregion
		#region Factory methods
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementMap;
	
		/// <summary>
		/// Creates an element of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementType">Element type which belongs to this domain model.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		public sealed override DslModeling::ModelElement CreateElement(DslModeling::Partition partition, global::System.Type elementType, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementType == null) throw new global::System.ArgumentNullException("elementType");
	
			if (createElementMap == null)
			{
				createElementMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(24);
				createElementMap.Add(typeof(SoSA), 0);
				createElementMap.Add(typeof(Concern), 1);
				createElementMap.Add(typeof(ImpactLevel), 2);
				createElementMap.Add(typeof(SystemicLevel), 3);
				createElementMap.Add(typeof(EnablingLevel), 4);
				createElementMap.Add(typeof(ImmediateLevel), 5);
				createElementMap.Add(typeof(SoftwareArchitecture), 6);
				createElementMap.Add(typeof(SocialConcern), 7);
				createElementMap.Add(typeof(TechnicalConcern), 8);
				createElementMap.Add(typeof(EnvironmentalConcern), 9);
				createElementMap.Add(typeof(EconomicConcern), 10);
				createElementMap.Add(typeof(RICTDiagram), 11);
				createElementMap.Add(typeof(sUndecidedEffect), 12);
				createElementMap.Add(typeof(sPositiveEffect), 13);
				createElementMap.Add(typeof(sNegativeEffect), 14);
				createElementMap.Add(typeof(sConcern), 15);
				createElementMap.Add(typeof(sSystematicLevel), 16);
				createElementMap.Add(typeof(sEnablingLevel), 17);
				createElementMap.Add(typeof(sImmediateLevel), 18);
				createElementMap.Add(typeof(sSoftwareArchitecture), 19);
				createElementMap.Add(typeof(sSocialConcern), 20);
				createElementMap.Add(typeof(sTechnicalConcern), 21);
				createElementMap.Add(typeof(sEnvironmentalConcern), 22);
				createElementMap.Add(typeof(sEconomicConcern), 23);
			}
			int index;
			if (!createElementMap.TryGetValue(elementType, out index))
			{
				// construct exception error message		
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::Company.RICT.RICTDomainModel.SingletonResourceManager.GetString("UnrecognizedElementType"),
								elementType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementType");
			}
			switch (index)
			{
				case 0: return new SoSA(partition, propertyAssignments);
				case 1: return new Concern(partition, propertyAssignments);
				case 2: return new ImpactLevel(partition, propertyAssignments);
				case 3: return new SystemicLevel(partition, propertyAssignments);
				case 4: return new EnablingLevel(partition, propertyAssignments);
				case 5: return new ImmediateLevel(partition, propertyAssignments);
				case 6: return new SoftwareArchitecture(partition, propertyAssignments);
				case 7: return new SocialConcern(partition, propertyAssignments);
				case 8: return new TechnicalConcern(partition, propertyAssignments);
				case 9: return new EnvironmentalConcern(partition, propertyAssignments);
				case 10: return new EconomicConcern(partition, propertyAssignments);
				case 11: return new RICTDiagram(partition, propertyAssignments);
				case 12: return new sUndecidedEffect(partition, propertyAssignments);
				case 13: return new sPositiveEffect(partition, propertyAssignments);
				case 14: return new sNegativeEffect(partition, propertyAssignments);
				case 15: return new sConcern(partition, propertyAssignments);
				case 16: return new sSystematicLevel(partition, propertyAssignments);
				case 17: return new sEnablingLevel(partition, propertyAssignments);
				case 18: return new sImmediateLevel(partition, propertyAssignments);
				case 19: return new sSoftwareArchitecture(partition, propertyAssignments);
				case 20: return new sSocialConcern(partition, propertyAssignments);
				case 21: return new sTechnicalConcern(partition, propertyAssignments);
				case 22: return new sEnvironmentalConcern(partition, propertyAssignments);
				case 23: return new sEconomicConcern(partition, propertyAssignments);
				default: return null;
			}
		}
	
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementLinkMap;
	
		/// <summary>
		/// Creates an element link of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementLinkType">Element link type which belongs to this domain model.</param>
		/// <param name="roleAssignments">List of relationship role assignments for the new link.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element link.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		public sealed override DslModeling::ElementLink CreateElementLink(DslModeling::Partition partition, global::System.Type elementLinkType, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementLinkType == null) throw new global::System.ArgumentNullException("elementLinkType");
			if (roleAssignments == null) throw new global::System.ArgumentNullException("roleAssignments");
	
			if (createElementLinkMap == null)
			{
				createElementLinkMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(9);
				createElementLinkMap.Add(typeof(UndecidedEffectConcern), 0);
				createElementLinkMap.Add(typeof(SoSAHasImpactLevels), 1);
				createElementLinkMap.Add(typeof(ImpactLevelHasConcerns), 2);
				createElementLinkMap.Add(typeof(ImmediateLevelHasSoftwareArchitectures), 3);
				createElementLinkMap.Add(typeof(PositiveEffectConcern), 4);
				createElementLinkMap.Add(typeof(NegativeEffectConcern), 5);
				createElementLinkMap.Add(typeof(UndecidedEffectSA), 6);
				createElementLinkMap.Add(typeof(PositiveEffectSA), 7);
				createElementLinkMap.Add(typeof(NegativeEffectSA), 8);
			}
			int index;
			if (!createElementLinkMap.TryGetValue(elementLinkType, out index))
			{
				// construct exception error message
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::Company.RICT.RICTDomainModel.SingletonResourceManager.GetString("UnrecognizedElementLinkType"),
								elementLinkType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementLinkType");
			
			}
			switch (index)
			{
				case 0: return new UndecidedEffectConcern(partition, roleAssignments, propertyAssignments);
				case 1: return new SoSAHasImpactLevels(partition, roleAssignments, propertyAssignments);
				case 2: return new ImpactLevelHasConcerns(partition, roleAssignments, propertyAssignments);
				case 3: return new ImmediateLevelHasSoftwareArchitectures(partition, roleAssignments, propertyAssignments);
				case 4: return new PositiveEffectConcern(partition, roleAssignments, propertyAssignments);
				case 5: return new NegativeEffectConcern(partition, roleAssignments, propertyAssignments);
				case 6: return new UndecidedEffectSA(partition, roleAssignments, propertyAssignments);
				case 7: return new PositiveEffectSA(partition, roleAssignments, propertyAssignments);
				case 8: return new NegativeEffectSA(partition, roleAssignments, propertyAssignments);
				default: return null;
			}
		}
		#endregion
		#region Resource manager
		
		private static global::System.Resources.ResourceManager resourceManager;
		
		/// <summary>
		/// The base name of this model's resources.
		/// </summary>
		public const string ResourceBaseName = "Company.RICT.GeneratedCode.DomainModelResx";
		
		/// <summary>
		/// Gets the DomainModel's ResourceManager. If the ResourceManager does not already exist, then it is created.
		/// </summary>
		public override global::System.Resources.ResourceManager ResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return RICTDomainModel.SingletonResourceManager;
			}
		}
	
		/// <summary>
		/// Gets the Singleton ResourceManager for this domain model.
		/// </summary>
		public static global::System.Resources.ResourceManager SingletonResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				if (RICTDomainModel.resourceManager == null)
				{
					RICTDomainModel.resourceManager = new global::System.Resources.ResourceManager(ResourceBaseName, typeof(RICTDomainModel).Assembly);
				}
				return RICTDomainModel.resourceManager;
			}
		}
		#endregion
		#region Copy/Remove closures
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter copyClosure;
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter removeClosure;
		/// <summary>
		/// Returns an IElementVisitorFilter that corresponds to the ClosureType.
		/// </summary>
		/// <param name="type">closure type</param>
		/// <param name="rootElements">collection of root elements</param>
		/// <returns>IElementVisitorFilter or null</returns>
		public override DslModeling::IElementVisitorFilter GetClosureFilter(DslModeling::ClosureType type, global::System.Collections.Generic.ICollection<DslModeling::ModelElement> rootElements)
		{
			switch (type)
			{
				case DslModeling::ClosureType.CopyClosure:
					return RICTDomainModel.CopyClosure;
				case DslModeling::ClosureType.DeleteClosure:
					return RICTDomainModel.DeleteClosure;
			}
			return base.GetClosureFilter(type, rootElements);
		}
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter CopyClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (RICTDomainModel.copyClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter copyFilter = new DslModeling::ChainingElementVisitorFilter();
					copyFilter.AddFilter(new RICTCopyClosure());
					copyFilter.AddFilter(new DslModeling::CoreCopyClosure());
					copyFilter.AddFilter(new DslDiagrams::CoreDesignSurfaceCopyClosure());
					
					RICTDomainModel.copyClosure = copyFilter;
				}
				return RICTDomainModel.copyClosure;
			}
		}
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter DeleteClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (RICTDomainModel.removeClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter removeFilter = new DslModeling::ChainingElementVisitorFilter();
					removeFilter.AddFilter(new RICTDeleteClosure());
					removeFilter.AddFilter(new DslModeling::CoreDeleteClosure());
					removeFilter.AddFilter(new DslDiagrams::CoreDesignSurfaceDeleteClosure());
		
					RICTDomainModel.removeClosure = removeFilter;
				}
				return RICTDomainModel.removeClosure;
			}
		}
		#endregion
		#region Diagram rule helpers
		/// <summary>
		/// Enables rules in this domain model related to diagram fixup for the given store.
		/// If diagram data will be loaded into the store, this method should be called first to ensure
		/// that the diagram behaves properly.
		/// </summary>
		public static void EnableDiagramRules(DslModeling::Store store)
		{
			if(store == null) throw new global::System.ArgumentNullException("store");
			
			DslModeling::RuleManager ruleManager = store.RuleManager;
			ruleManager.EnableRule(typeof(global::Company.RICT.FixUpDiagram));
			ruleManager.EnableRule(typeof(global::Company.RICT.ConnectorRolePlayerChanged));
		}
		
		/// <summary>
		/// Disables rules in this domain model related to diagram fixup for the given store.
		/// </summary>
		public static void DisableDiagramRules(DslModeling::Store store)
		{
			if(store == null) throw new global::System.ArgumentNullException("store");
			
			DslModeling::RuleManager ruleManager = store.RuleManager;
			ruleManager.DisableRule(typeof(global::Company.RICT.FixUpDiagram));
			ruleManager.DisableRule(typeof(global::Company.RICT.ConnectorRolePlayerChanged));
		}
		#endregion
	}
		
	#region Copy/Remove closure classes
	/// <summary>
	/// Remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class RICTDeleteClosure : RICTDeleteClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RICTDeleteClosure() : base()
		{
		}
	}
	
	/// <summary>
	/// Base class for remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class RICTDeleteClosureBase : DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary domainRoles;
		/// <summary>
		/// Constructor
		/// </summary>
		public RICTDeleteClosureBase()
		{
			#region Initialize DomainData Table
			DomainRoles.Add(global::Company.RICT.SoSAHasImpactLevels.ImpactLevelDomainRoleId, true);
			DomainRoles.Add(global::Company.RICT.ImpactLevelHasConcerns.ConcernDomainRoleId, true);
			DomainRoles.Add(global::Company.RICT.ImmediateLevelHasSoftwareArchitectures.SoftwareArchitectureDomainRoleId, true);
			#endregion
		}
		/// <summary>
		/// Called to ask the filter if a particular relationship from a source element should be included in the traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="sourceRoleInfo">DomainRoleInfo of the role that the source element is playing in the relationship</param>
		/// <param name="domainRelationshipInfo">DomainRelationshipInfo for the ElementLink in question</param>
		/// <param name="targetRelationship">Relationship in question</param>
		/// <returns>Yes if the relationship should be traversed</returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRelationship(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::DomainRoleInfo sourceRoleInfo, DslModeling::DomainRelationshipInfo domainRelationshipInfo, DslModeling::ElementLink targetRelationship)
		{
			return DslModeling::VisitorFilterResult.Yes;
		}
		/// <summary>
		/// Called to ask the filter if a particular role player should be Visited during traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
		/// <param name="targetDomainRole">DomainRoleInfo of the target role</param>
		/// <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
		/// <returns></returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRolePlayer(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::ElementLink elementLink, DslModeling::DomainRoleInfo targetDomainRole, DslModeling::ModelElement targetRolePlayer)
		{
			if (targetDomainRole == null) throw new global::System.ArgumentNullException("targetDomainRole");
			return this.DomainRoles.Contains(targetDomainRole.Id) ? DslModeling::VisitorFilterResult.Yes : DslModeling::VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary DomainRoles
		{
			get
			{
				if (this.domainRoles == null)
				{
					this.domainRoles = new global::System.Collections.Specialized.HybridDictionary();
				}
				return this.domainRoles;
			}
		}
	
	}
	/// <summary>
	/// Copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class RICTCopyClosure : RICTCopyClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RICTCopyClosure() : base()
		{
		}
	}
	/// <summary>
	/// Base class for copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class RICTCopyClosureBase : DslModeling::CopyClosureFilter, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RICTCopyClosureBase():base()
		{
		}
	}
	#endregion
		
}

