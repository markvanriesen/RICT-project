//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.RICT
{
	/// <summary>
	/// DomainRelationship UndecidedEffectConcern
	/// Reference relationship between Elements.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.RICT.UndecidedEffectConcern.DisplayName", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.RICT.UndecidedEffectConcern.Description", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.RICT.RICTDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("25180afa-b3a5-4e5d-9d58-f844e5b147ee")]
	public partial class UndecidedEffectConcern : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// UndecidedEffectConcern domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x25180afa, 0xb3a5, 0x4e5d, 0x9d, 0x58, 0xf8, 0x44, 0xe5, 0xb1, 0x47, 0xee);
	
				
		/// <summary>
		/// Constructor
		/// Creates a UndecidedEffectConcern link in the same Partition as the given Concern
		/// </summary>
		/// <param name="source">Concern to use as the source of the relationship.</param>
		/// <param name="target">Concern to use as the target of the relationship.</param>
		public UndecidedEffectConcern(Concern source, Concern target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(UndecidedEffectConcern.SourceDomainRoleId, source), new DslModeling::RoleAssignment(UndecidedEffectConcern.TargetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UndecidedEffectConcern(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UndecidedEffectConcern(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UndecidedEffectConcern(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UndecidedEffectConcern(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0xc4b489e3, 0xc9f7, 0x45ab, 0xb1, 0xbb, 0x3c, 0x31, 0x3a, 0x75, 0x2f, 0x2c);
		
		/// <summary>
		/// DomainRole Source
		/// Description for Company.RICT.ExampleRelationship.Target
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT.UndecidedEffectConcern/Source.DisplayName", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT.UndecidedEffectConcern/Source.Description", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetConcerns1", PropertyDisplayNameKey="Company.RICT.UndecidedEffectConcern/Source.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c4b489e3-c9f7-45ab-b1bb-3c313a752f2c")]
		public virtual Concern Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Concern)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceConcerns1 of a Concern
		/// <summary>
		/// Gets a list of SourceConcerns1.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Concern> GetSourceConcerns1(Concern element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Concern>, Concern>(element, TargetDomainRoleId);
		}
		#endregion
		#region Target domain role code
		
		/// <summary>
		/// Target domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetDomainRoleId = new global::System.Guid(0x05ccb5f8, 0xd074, 0x479e, 0x89, 0x50, 0x7a, 0x2e, 0x2f, 0x7a, 0xff, 0x54);
		
		/// <summary>
		/// DomainRole Target
		/// Description for Company.RICT.ExampleRelationship.Source
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT.UndecidedEffectConcern/Target.DisplayName", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT.UndecidedEffectConcern/Target.Description", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceConcerns1", PropertyDisplayNameKey="Company.RICT.UndecidedEffectConcern/Target.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("05ccb5f8-d074-479e-8950-7a2e2f7aff54")]
		public virtual Concern Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Concern)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetConcerns1 of a Concern
		/// <summary>
		/// Gets a list of TargetConcerns1.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Concern> GetTargetConcerns1(Concern element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Concern>, Concern>(element, SourceDomainRoleId);
		}
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of UndecidedEffectConcern links to a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT.UndecidedEffectConcern> GetLinksToTargetConcerns1 ( global::Company.RICT.Concern sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT.UndecidedEffectConcern>(sourceInstance, global::Company.RICT.UndecidedEffectConcern.SourceDomainRoleId);
		}
		#endregion
		#region Target link accessor
		/// <summary>
		/// Get the list of UndecidedEffectConcern links to a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT.UndecidedEffectConcern> GetLinksToSourceConcerns1 ( global::Company.RICT.Concern targetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT.UndecidedEffectConcern>(targetInstance, global::Company.RICT.UndecidedEffectConcern.TargetDomainRoleId);
		}
		#endregion
		#region UndecidedEffectConcern instance accessors
		
		/// <summary>
		/// Get any UndecidedEffectConcern links between a given Concern and a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT.UndecidedEffectConcern> GetLinks( global::Company.RICT.Concern source, global::Company.RICT.Concern target )
		{
			global::System.Collections.Generic.List<global::Company.RICT.UndecidedEffectConcern> outLinks = new global::System.Collections.Generic.List<global::Company.RICT.UndecidedEffectConcern>();
			global::System.Collections.Generic.IList<global::Company.RICT.UndecidedEffectConcern> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT.UndecidedEffectConcern>(source, global::Company.RICT.UndecidedEffectConcern.SourceDomainRoleId);
			foreach ( global::Company.RICT.UndecidedEffectConcern link in links )
			{
				if ( target.Equals(link.Target) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one UndecidedEffectConcern link between a given Concernand a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.RICT.UndecidedEffectConcern GetLink( global::Company.RICT.Concern source, global::Company.RICT.Concern target )
		{
			global::System.Collections.Generic.IList<global::Company.RICT.UndecidedEffectConcern> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT.UndecidedEffectConcern>(source, global::Company.RICT.UndecidedEffectConcern.SourceDomainRoleId);
			foreach ( global::Company.RICT.UndecidedEffectConcern link in links )
			{
				if ( target.Equals(link.Target) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.RICT
{
	/// <summary>
	/// DomainRelationship SoSAHasImpactLevels
	/// Description for Company.RICT.SoSAHasImpactLevels
	/// </summary>
	[DslDesign::DisplayNameResource("Company.RICT.SoSAHasImpactLevels.DisplayName", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.RICT.SoSAHasImpactLevels.Description", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.RICT.RICTDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("bec2ba71-2214-44c0-af04-10e1375ef444")]
	public partial class SoSAHasImpactLevels : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SoSAHasImpactLevels domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbec2ba71, 0x2214, 0x44c0, 0xaf, 0x04, 0x10, 0xe1, 0x37, 0x5e, 0xf4, 0x44);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SoSAHasImpactLevels link in the same Partition as the given SoSA
		/// </summary>
		/// <param name="source">SoSA to use as the source of the relationship.</param>
		/// <param name="target">ImpactLevel to use as the target of the relationship.</param>
		public SoSAHasImpactLevels(SoSA source, ImpactLevel target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SoSAHasImpactLevels.SoSADomainRoleId, source), new DslModeling::RoleAssignment(SoSAHasImpactLevels.ImpactLevelDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SoSAHasImpactLevels(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SoSAHasImpactLevels(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SoSAHasImpactLevels(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SoSAHasImpactLevels(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SoSA domain role code
		
		/// <summary>
		/// SoSA domain role Id.
		/// </summary>
		public static readonly global::System.Guid SoSADomainRoleId = new global::System.Guid(0x0c7c70fc, 0x5dae, 0x4d08, 0xa8, 0x96, 0x68, 0xcd, 0xa7, 0xe3, 0x41, 0x2e);
		
		/// <summary>
		/// DomainRole SoSA
		/// Description for Company.RICT.SoSAHasImpactLevels.SoSA
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT.SoSAHasImpactLevels/SoSA.DisplayName", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT.SoSAHasImpactLevels/SoSA.Description", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ImpactLevels", PropertyDisplayNameKey="Company.RICT.SoSAHasImpactLevels/SoSA.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0c7c70fc-5dae-4d08-a896-68cda7e3412e")]
		public virtual SoSA SoSA
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SoSA)DslModeling::DomainRoleInfo.GetRolePlayer(this, SoSADomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SoSADomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SoSA of a ImpactLevel
		/// <summary>
		/// Gets SoSA.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SoSA GetSoSA(ImpactLevel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ImpactLevelDomainRoleId) as SoSA;
		}
		
		/// <summary>
		/// Sets SoSA.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSoSA(ImpactLevel element, SoSA newSoSA)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ImpactLevelDomainRoleId, newSoSA);
		}
		#endregion
		#region ImpactLevel domain role code
		
		/// <summary>
		/// ImpactLevel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ImpactLevelDomainRoleId = new global::System.Guid(0x460d573f, 0x8b3a, 0x4002, 0x87, 0x1c, 0x4f, 0xcd, 0xdf, 0x77, 0xf9, 0x37);
		
		/// <summary>
		/// DomainRole ImpactLevel
		/// Description for Company.RICT.SoSAHasImpactLevels.ImpactLevel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT.SoSAHasImpactLevels/ImpactLevel.DisplayName", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT.SoSAHasImpactLevels/ImpactLevel.Description", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SoSA", PropertyDisplayNameKey="Company.RICT.SoSAHasImpactLevels/ImpactLevel.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("460d573f-8b3a-4002-871c-4fcddf77f937")]
		public virtual ImpactLevel ImpactLevel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ImpactLevel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ImpactLevelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ImpactLevelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ImpactLevels of a SoSA
		/// <summary>
		/// Gets a list of ImpactLevels.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ImpactLevel> GetImpactLevels(SoSA element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ImpactLevel>, ImpactLevel>(element, SoSADomainRoleId);
		}
		#endregion
		#region SoSA link accessor
		/// <summary>
		/// Get the list of SoSAHasImpactLevels links to a SoSA.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT.SoSAHasImpactLevels> GetLinksToImpactLevels ( global::Company.RICT.SoSA soSAInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT.SoSAHasImpactLevels>(soSAInstance, global::Company.RICT.SoSAHasImpactLevels.SoSADomainRoleId);
		}
		#endregion
		#region ImpactLevel link accessor
		/// <summary>
		/// Get the SoSAHasImpactLevels link to a ImpactLevel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.RICT.SoSAHasImpactLevels GetLinkToSoSA (global::Company.RICT.ImpactLevel impactLevelInstance)
		{
			global::System.Collections.Generic.IList<global::Company.RICT.SoSAHasImpactLevels> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT.SoSAHasImpactLevels>(impactLevelInstance, global::Company.RICT.SoSAHasImpactLevels.ImpactLevelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ImpactLevel not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SoSAHasImpactLevels instance accessors
		
		/// <summary>
		/// Get any SoSAHasImpactLevels links between a given SoSA and a ImpactLevel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT.SoSAHasImpactLevels> GetLinks( global::Company.RICT.SoSA source, global::Company.RICT.ImpactLevel target )
		{
			global::System.Collections.Generic.List<global::Company.RICT.SoSAHasImpactLevels> outLinks = new global::System.Collections.Generic.List<global::Company.RICT.SoSAHasImpactLevels>();
			global::System.Collections.Generic.IList<global::Company.RICT.SoSAHasImpactLevels> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT.SoSAHasImpactLevels>(source, global::Company.RICT.SoSAHasImpactLevels.SoSADomainRoleId);
			foreach ( global::Company.RICT.SoSAHasImpactLevels link in links )
			{
				if ( target.Equals(link.ImpactLevel) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SoSAHasImpactLevels link between a given SoSAand a ImpactLevel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.RICT.SoSAHasImpactLevels GetLink( global::Company.RICT.SoSA source, global::Company.RICT.ImpactLevel target )
		{
			global::System.Collections.Generic.IList<global::Company.RICT.SoSAHasImpactLevels> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT.SoSAHasImpactLevels>(source, global::Company.RICT.SoSAHasImpactLevels.SoSADomainRoleId);
			foreach ( global::Company.RICT.SoSAHasImpactLevels link in links )
			{
				if ( target.Equals(link.ImpactLevel) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.RICT
{
	/// <summary>
	/// DomainRelationship ImpactLevelHasConcerns
	/// Description for Company.RICT.ImpactLevelHasConcerns
	/// </summary>
	[DslDesign::DisplayNameResource("Company.RICT.ImpactLevelHasConcerns.DisplayName", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.RICT.ImpactLevelHasConcerns.Description", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.RICT.RICTDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("52f5f2b5-5ad2-4597-adba-1b510ea78290")]
	public partial class ImpactLevelHasConcerns : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ImpactLevelHasConcerns domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x52f5f2b5, 0x5ad2, 0x4597, 0xad, 0xba, 0x1b, 0x51, 0x0e, 0xa7, 0x82, 0x90);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ImpactLevelHasConcerns link in the same Partition as the given ImpactLevel
		/// </summary>
		/// <param name="source">ImpactLevel to use as the source of the relationship.</param>
		/// <param name="target">Concern to use as the target of the relationship.</param>
		public ImpactLevelHasConcerns(ImpactLevel source, Concern target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ImpactLevelHasConcerns.ImpactLevelDomainRoleId, source), new DslModeling::RoleAssignment(ImpactLevelHasConcerns.ConcernDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ImpactLevelHasConcerns(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ImpactLevelHasConcerns(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ImpactLevelHasConcerns(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ImpactLevelHasConcerns(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ImpactLevel domain role code
		
		/// <summary>
		/// ImpactLevel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ImpactLevelDomainRoleId = new global::System.Guid(0x8f47dcf5, 0x5ada, 0x41fd, 0x91, 0xc6, 0x82, 0x7a, 0x97, 0x09, 0xc7, 0xf4);
		
		/// <summary>
		/// DomainRole ImpactLevel
		/// Description for Company.RICT.ImpactLevelHasConcerns.ImpactLevel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT.ImpactLevelHasConcerns/ImpactLevel.DisplayName", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT.ImpactLevelHasConcerns/ImpactLevel.Description", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Concerns", PropertyDisplayNameKey="Company.RICT.ImpactLevelHasConcerns/ImpactLevel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8f47dcf5-5ada-41fd-91c6-827a9709c7f4")]
		public virtual ImpactLevel ImpactLevel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ImpactLevel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ImpactLevelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ImpactLevelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ImpactLevel of a Concern
		/// <summary>
		/// Gets ImpactLevel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ImpactLevel GetImpactLevel(Concern element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConcernDomainRoleId) as ImpactLevel;
		}
		
		/// <summary>
		/// Sets ImpactLevel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetImpactLevel(Concern element, ImpactLevel newImpactLevel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConcernDomainRoleId, newImpactLevel);
		}
		#endregion
		#region Concern domain role code
		
		/// <summary>
		/// Concern domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConcernDomainRoleId = new global::System.Guid(0xe2970d9b, 0x92b6, 0x49f9, 0x89, 0x64, 0x9f, 0x29, 0xe6, 0x57, 0x74, 0xf6);
		
		/// <summary>
		/// DomainRole Concern
		/// Description for Company.RICT.ImpactLevelHasConcerns.Concern
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT.ImpactLevelHasConcerns/Concern.DisplayName", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT.ImpactLevelHasConcerns/Concern.Description", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ImpactLevel", PropertyDisplayNameKey="Company.RICT.ImpactLevelHasConcerns/Concern.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("e2970d9b-92b6-49f9-8964-9f29e65774f6")]
		public virtual Concern Concern
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Concern)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConcernDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConcernDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Concerns of a ImpactLevel
		/// <summary>
		/// Gets a list of Concerns.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Concern> GetConcerns(ImpactLevel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Concern>, Concern>(element, ImpactLevelDomainRoleId);
		}
		#endregion
		#region ImpactLevel link accessor
		/// <summary>
		/// Get the list of ImpactLevelHasConcerns links to a ImpactLevel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT.ImpactLevelHasConcerns> GetLinksToConcerns ( global::Company.RICT.ImpactLevel impactLevelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT.ImpactLevelHasConcerns>(impactLevelInstance, global::Company.RICT.ImpactLevelHasConcerns.ImpactLevelDomainRoleId);
		}
		#endregion
		#region Concern link accessor
		/// <summary>
		/// Get the ImpactLevelHasConcerns link to a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.RICT.ImpactLevelHasConcerns GetLinkToImpactLevel (global::Company.RICT.Concern concernInstance)
		{
			global::System.Collections.Generic.IList<global::Company.RICT.ImpactLevelHasConcerns> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT.ImpactLevelHasConcerns>(concernInstance, global::Company.RICT.ImpactLevelHasConcerns.ConcernDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Concern not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ImpactLevelHasConcerns instance accessors
		
		/// <summary>
		/// Get any ImpactLevelHasConcerns links between a given ImpactLevel and a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT.ImpactLevelHasConcerns> GetLinks( global::Company.RICT.ImpactLevel source, global::Company.RICT.Concern target )
		{
			global::System.Collections.Generic.List<global::Company.RICT.ImpactLevelHasConcerns> outLinks = new global::System.Collections.Generic.List<global::Company.RICT.ImpactLevelHasConcerns>();
			global::System.Collections.Generic.IList<global::Company.RICT.ImpactLevelHasConcerns> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT.ImpactLevelHasConcerns>(source, global::Company.RICT.ImpactLevelHasConcerns.ImpactLevelDomainRoleId);
			foreach ( global::Company.RICT.ImpactLevelHasConcerns link in links )
			{
				if ( target.Equals(link.Concern) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ImpactLevelHasConcerns link between a given ImpactLeveland a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.RICT.ImpactLevelHasConcerns GetLink( global::Company.RICT.ImpactLevel source, global::Company.RICT.Concern target )
		{
			global::System.Collections.Generic.IList<global::Company.RICT.ImpactLevelHasConcerns> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT.ImpactLevelHasConcerns>(source, global::Company.RICT.ImpactLevelHasConcerns.ImpactLevelDomainRoleId);
			foreach ( global::Company.RICT.ImpactLevelHasConcerns link in links )
			{
				if ( target.Equals(link.Concern) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.RICT
{
	/// <summary>
	/// DomainRelationship ImmediateLevelHasSoftwareArchitectures
	/// Description for Company.RICT.ImmediateLevelHasSoftwareArchitectures
	/// </summary>
	[DslDesign::DisplayNameResource("Company.RICT.ImmediateLevelHasSoftwareArchitectures.DisplayName", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.RICT.ImmediateLevelHasSoftwareArchitectures.Description", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.RICT.RICTDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("9c3e6a21-1e3f-47d6-a7b7-1853f90edfed")]
	public partial class ImmediateLevelHasSoftwareArchitectures : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ImmediateLevelHasSoftwareArchitectures domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9c3e6a21, 0x1e3f, 0x47d6, 0xa7, 0xb7, 0x18, 0x53, 0xf9, 0x0e, 0xdf, 0xed);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ImmediateLevelHasSoftwareArchitectures link in the same Partition as the given ImmediateLevel
		/// </summary>
		/// <param name="source">ImmediateLevel to use as the source of the relationship.</param>
		/// <param name="target">SoftwareArchitecture to use as the target of the relationship.</param>
		public ImmediateLevelHasSoftwareArchitectures(ImmediateLevel source, SoftwareArchitecture target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ImmediateLevelHasSoftwareArchitectures.ImmediateLevelDomainRoleId, source), new DslModeling::RoleAssignment(ImmediateLevelHasSoftwareArchitectures.SoftwareArchitectureDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ImmediateLevelHasSoftwareArchitectures(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ImmediateLevelHasSoftwareArchitectures(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ImmediateLevelHasSoftwareArchitectures(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ImmediateLevelHasSoftwareArchitectures(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ImmediateLevel domain role code
		
		/// <summary>
		/// ImmediateLevel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ImmediateLevelDomainRoleId = new global::System.Guid(0x569cdd24, 0x0f6a, 0x4aa9, 0x91, 0x43, 0x3b, 0x17, 0x4e, 0xa2, 0x5c, 0x57);
		
		/// <summary>
		/// DomainRole ImmediateLevel
		/// Description for
		/// Company.RICT.ImmediateLevelHasSoftwareArchitectures.ImmediateLevel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT.ImmediateLevelHasSoftwareArchitectures/ImmediateLevel.DisplayName", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT.ImmediateLevelHasSoftwareArchitectures/ImmediateLevel.Description", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SoftwareArchitectures", PropertyDisplayNameKey="Company.RICT.ImmediateLevelHasSoftwareArchitectures/ImmediateLevel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("569cdd24-0f6a-4aa9-9143-3b174ea25c57")]
		public virtual ImmediateLevel ImmediateLevel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ImmediateLevel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ImmediateLevelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ImmediateLevelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ImmediateLevel of a SoftwareArchitecture
		/// <summary>
		/// Gets ImmediateLevel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ImmediateLevel GetImmediateLevel(SoftwareArchitecture element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SoftwareArchitectureDomainRoleId) as ImmediateLevel;
		}
		
		/// <summary>
		/// Sets ImmediateLevel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetImmediateLevel(SoftwareArchitecture element, ImmediateLevel newImmediateLevel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SoftwareArchitectureDomainRoleId, newImmediateLevel);
		}
		#endregion
		#region SoftwareArchitecture domain role code
		
		/// <summary>
		/// SoftwareArchitecture domain role Id.
		/// </summary>
		public static readonly global::System.Guid SoftwareArchitectureDomainRoleId = new global::System.Guid(0xfcf8cc34, 0xd0f1, 0x46ab, 0x90, 0x7f, 0x81, 0xc8, 0x4d, 0xf7, 0xa1, 0x3a);
		
		/// <summary>
		/// DomainRole SoftwareArchitecture
		/// Description for
		/// Company.RICT.ImmediateLevelHasSoftwareArchitectures.SoftwareArchitecture
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT.ImmediateLevelHasSoftwareArchitectures/SoftwareArchitecture.DisplayName", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT.ImmediateLevelHasSoftwareArchitectures/SoftwareArchitecture.Description", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ImmediateLevel", PropertyDisplayNameKey="Company.RICT.ImmediateLevelHasSoftwareArchitectures/SoftwareArchitecture.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("fcf8cc34-d0f1-46ab-907f-81c84df7a13a")]
		public virtual SoftwareArchitecture SoftwareArchitecture
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SoftwareArchitecture)DslModeling::DomainRoleInfo.GetRolePlayer(this, SoftwareArchitectureDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SoftwareArchitectureDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SoftwareArchitectures of a ImmediateLevel
		/// <summary>
		/// Gets a list of SoftwareArchitectures.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SoftwareArchitecture> GetSoftwareArchitectures(ImmediateLevel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<SoftwareArchitecture>, SoftwareArchitecture>(element, ImmediateLevelDomainRoleId);
		}
		#endregion
		#region ImmediateLevel link accessor
		/// <summary>
		/// Get the list of ImmediateLevelHasSoftwareArchitectures links to a ImmediateLevel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT.ImmediateLevelHasSoftwareArchitectures> GetLinksToSoftwareArchitectures ( global::Company.RICT.ImmediateLevel immediateLevelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT.ImmediateLevelHasSoftwareArchitectures>(immediateLevelInstance, global::Company.RICT.ImmediateLevelHasSoftwareArchitectures.ImmediateLevelDomainRoleId);
		}
		#endregion
		#region SoftwareArchitecture link accessor
		/// <summary>
		/// Get the ImmediateLevelHasSoftwareArchitectures link to a SoftwareArchitecture.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.RICT.ImmediateLevelHasSoftwareArchitectures GetLinkToImmediateLevel (global::Company.RICT.SoftwareArchitecture softwareArchitectureInstance)
		{
			global::System.Collections.Generic.IList<global::Company.RICT.ImmediateLevelHasSoftwareArchitectures> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT.ImmediateLevelHasSoftwareArchitectures>(softwareArchitectureInstance, global::Company.RICT.ImmediateLevelHasSoftwareArchitectures.SoftwareArchitectureDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SoftwareArchitecture not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ImmediateLevelHasSoftwareArchitectures instance accessors
		
		/// <summary>
		/// Get any ImmediateLevelHasSoftwareArchitectures links between a given ImmediateLevel and a SoftwareArchitecture.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT.ImmediateLevelHasSoftwareArchitectures> GetLinks( global::Company.RICT.ImmediateLevel source, global::Company.RICT.SoftwareArchitecture target )
		{
			global::System.Collections.Generic.List<global::Company.RICT.ImmediateLevelHasSoftwareArchitectures> outLinks = new global::System.Collections.Generic.List<global::Company.RICT.ImmediateLevelHasSoftwareArchitectures>();
			global::System.Collections.Generic.IList<global::Company.RICT.ImmediateLevelHasSoftwareArchitectures> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT.ImmediateLevelHasSoftwareArchitectures>(source, global::Company.RICT.ImmediateLevelHasSoftwareArchitectures.ImmediateLevelDomainRoleId);
			foreach ( global::Company.RICT.ImmediateLevelHasSoftwareArchitectures link in links )
			{
				if ( target.Equals(link.SoftwareArchitecture) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ImmediateLevelHasSoftwareArchitectures link between a given ImmediateLeveland a SoftwareArchitecture.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.RICT.ImmediateLevelHasSoftwareArchitectures GetLink( global::Company.RICT.ImmediateLevel source, global::Company.RICT.SoftwareArchitecture target )
		{
			global::System.Collections.Generic.IList<global::Company.RICT.ImmediateLevelHasSoftwareArchitectures> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT.ImmediateLevelHasSoftwareArchitectures>(source, global::Company.RICT.ImmediateLevelHasSoftwareArchitectures.ImmediateLevelDomainRoleId);
			foreach ( global::Company.RICT.ImmediateLevelHasSoftwareArchitectures link in links )
			{
				if ( target.Equals(link.SoftwareArchitecture) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.RICT
{
	/// <summary>
	/// DomainRelationship PositiveEffectConcern
	/// Description for Company.RICT.PositiveEffectConcern
	/// </summary>
	[DslDesign::DisplayNameResource("Company.RICT.PositiveEffectConcern.DisplayName", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.RICT.PositiveEffectConcern.Description", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.RICT.RICTDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("c159c5db-0ee6-4321-8738-4839cfe9770e")]
	public partial class PositiveEffectConcern : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// PositiveEffectConcern domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc159c5db, 0x0ee6, 0x4321, 0x87, 0x38, 0x48, 0x39, 0xcf, 0xe9, 0x77, 0x0e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a PositiveEffectConcern link in the same Partition as the given Concern
		/// </summary>
		/// <param name="source">Concern to use as the source of the relationship.</param>
		/// <param name="target">Concern to use as the target of the relationship.</param>
		public PositiveEffectConcern(Concern source, Concern target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(PositiveEffectConcern.SourceConcernDomainRoleId, source), new DslModeling::RoleAssignment(PositiveEffectConcern.TargetConcernDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PositiveEffectConcern(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PositiveEffectConcern(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PositiveEffectConcern(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PositiveEffectConcern(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceConcern domain role code
		
		/// <summary>
		/// SourceConcern domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceConcernDomainRoleId = new global::System.Guid(0xa35ab03c, 0xc8f3, 0x4f7b, 0xb6, 0x5e, 0x96, 0x1d, 0xd9, 0x4c, 0x1a, 0x72);
		
		/// <summary>
		/// DomainRole SourceConcern
		/// Description for Company.RICT.PositiveEffectConcern.SourceConcern
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT.PositiveEffectConcern/SourceConcern.DisplayName", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT.PositiveEffectConcern/SourceConcern.Description", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetConcerns2", PropertyDisplayNameKey="Company.RICT.PositiveEffectConcern/SourceConcern.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a35ab03c-c8f3-4f7b-b65e-961dd94c1a72")]
		public virtual Concern SourceConcern
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Concern)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceConcernDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceConcernDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceConcerns2 of a Concern
		/// <summary>
		/// Gets a list of SourceConcerns2.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Concern> GetSourceConcerns2(Concern element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Concern>, Concern>(element, TargetConcernDomainRoleId);
		}
		#endregion
		#region TargetConcern domain role code
		
		/// <summary>
		/// TargetConcern domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetConcernDomainRoleId = new global::System.Guid(0x56c388fc, 0xd864, 0x484c, 0xbd, 0x1b, 0x4a, 0xd2, 0x95, 0x8c, 0xe0, 0xaf);
		
		/// <summary>
		/// DomainRole TargetConcern
		/// Description for Company.RICT.PositiveEffectConcern.TargetConcern
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT.PositiveEffectConcern/TargetConcern.DisplayName", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT.PositiveEffectConcern/TargetConcern.Description", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceConcerns2", PropertyDisplayNameKey="Company.RICT.PositiveEffectConcern/TargetConcern.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("56c388fc-d864-484c-bd1b-4ad2958ce0af")]
		public virtual Concern TargetConcern
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Concern)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetConcernDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetConcernDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetConcerns2 of a Concern
		/// <summary>
		/// Gets a list of TargetConcerns2.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Concern> GetTargetConcerns2(Concern element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Concern>, Concern>(element, SourceConcernDomainRoleId);
		}
		#endregion
		#region SourceConcern link accessor
		/// <summary>
		/// Get the list of PositiveEffectConcern links to a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT.PositiveEffectConcern> GetLinksToTargetConcerns2 ( global::Company.RICT.Concern sourceConcernInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT.PositiveEffectConcern>(sourceConcernInstance, global::Company.RICT.PositiveEffectConcern.SourceConcernDomainRoleId);
		}
		#endregion
		#region TargetConcern link accessor
		/// <summary>
		/// Get the list of PositiveEffectConcern links to a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT.PositiveEffectConcern> GetLinksToSourceConcerns2 ( global::Company.RICT.Concern targetConcernInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT.PositiveEffectConcern>(targetConcernInstance, global::Company.RICT.PositiveEffectConcern.TargetConcernDomainRoleId);
		}
		#endregion
		#region PositiveEffectConcern instance accessors
		
		/// <summary>
		/// Get any PositiveEffectConcern links between a given Concern and a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT.PositiveEffectConcern> GetLinks( global::Company.RICT.Concern source, global::Company.RICT.Concern target )
		{
			global::System.Collections.Generic.List<global::Company.RICT.PositiveEffectConcern> outLinks = new global::System.Collections.Generic.List<global::Company.RICT.PositiveEffectConcern>();
			global::System.Collections.Generic.IList<global::Company.RICT.PositiveEffectConcern> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT.PositiveEffectConcern>(source, global::Company.RICT.PositiveEffectConcern.SourceConcernDomainRoleId);
			foreach ( global::Company.RICT.PositiveEffectConcern link in links )
			{
				if ( target.Equals(link.TargetConcern) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one PositiveEffectConcern link between a given Concernand a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.RICT.PositiveEffectConcern GetLink( global::Company.RICT.Concern source, global::Company.RICT.Concern target )
		{
			global::System.Collections.Generic.IList<global::Company.RICT.PositiveEffectConcern> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT.PositiveEffectConcern>(source, global::Company.RICT.PositiveEffectConcern.SourceConcernDomainRoleId);
			foreach ( global::Company.RICT.PositiveEffectConcern link in links )
			{
				if ( target.Equals(link.TargetConcern) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.RICT
{
	/// <summary>
	/// DomainRelationship NegativeEffectConcern
	/// Description for Company.RICT.NegativeEffectConcern
	/// </summary>
	[DslDesign::DisplayNameResource("Company.RICT.NegativeEffectConcern.DisplayName", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.RICT.NegativeEffectConcern.Description", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.RICT.RICTDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("92feb723-e979-44c5-a354-052ad1297699")]
	public partial class NegativeEffectConcern : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// NegativeEffectConcern domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x92feb723, 0xe979, 0x44c5, 0xa3, 0x54, 0x05, 0x2a, 0xd1, 0x29, 0x76, 0x99);
	
				
		/// <summary>
		/// Constructor
		/// Creates a NegativeEffectConcern link in the same Partition as the given Concern
		/// </summary>
		/// <param name="source">Concern to use as the source of the relationship.</param>
		/// <param name="target">Concern to use as the target of the relationship.</param>
		public NegativeEffectConcern(Concern source, Concern target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(NegativeEffectConcern.SourceConcernDomainRoleId, source), new DslModeling::RoleAssignment(NegativeEffectConcern.TargetConcernDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public NegativeEffectConcern(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public NegativeEffectConcern(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public NegativeEffectConcern(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public NegativeEffectConcern(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceConcern domain role code
		
		/// <summary>
		/// SourceConcern domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceConcernDomainRoleId = new global::System.Guid(0x1b7c24ea, 0x2aec, 0x41f6, 0xb1, 0xe4, 0x04, 0x50, 0xdb, 0x1b, 0x34, 0x14);
		
		/// <summary>
		/// DomainRole SourceConcern
		/// Description for Company.RICT.NegativeEffectConcern.SourceConcern
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT.NegativeEffectConcern/SourceConcern.DisplayName", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT.NegativeEffectConcern/SourceConcern.Description", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetConcerns3", PropertyDisplayNameKey="Company.RICT.NegativeEffectConcern/SourceConcern.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1b7c24ea-2aec-41f6-b1e4-0450db1b3414")]
		public virtual Concern SourceConcern
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Concern)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceConcernDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceConcernDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceConcerns3 of a Concern
		/// <summary>
		/// Gets a list of SourceConcerns3.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Concern> GetSourceConcerns3(Concern element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Concern>, Concern>(element, TargetConcernDomainRoleId);
		}
		#endregion
		#region TargetConcern domain role code
		
		/// <summary>
		/// TargetConcern domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetConcernDomainRoleId = new global::System.Guid(0x4bb4e4dc, 0x50bf, 0x4fe3, 0x83, 0x66, 0x37, 0xb3, 0xe3, 0x10, 0xce, 0xa9);
		
		/// <summary>
		/// DomainRole TargetConcern
		/// Description for Company.RICT.NegativeEffectConcern.TargetConcern
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT.NegativeEffectConcern/TargetConcern.DisplayName", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT.NegativeEffectConcern/TargetConcern.Description", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceConcerns3", PropertyDisplayNameKey="Company.RICT.NegativeEffectConcern/TargetConcern.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4bb4e4dc-50bf-4fe3-8366-37b3e310cea9")]
		public virtual Concern TargetConcern
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Concern)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetConcernDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetConcernDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetConcerns3 of a Concern
		/// <summary>
		/// Gets a list of TargetConcerns3.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Concern> GetTargetConcerns3(Concern element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Concern>, Concern>(element, SourceConcernDomainRoleId);
		}
		#endregion
		#region SourceConcern link accessor
		/// <summary>
		/// Get the list of NegativeEffectConcern links to a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT.NegativeEffectConcern> GetLinksToTargetConcerns3 ( global::Company.RICT.Concern sourceConcernInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT.NegativeEffectConcern>(sourceConcernInstance, global::Company.RICT.NegativeEffectConcern.SourceConcernDomainRoleId);
		}
		#endregion
		#region TargetConcern link accessor
		/// <summary>
		/// Get the list of NegativeEffectConcern links to a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT.NegativeEffectConcern> GetLinksToSourceConcerns3 ( global::Company.RICT.Concern targetConcernInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT.NegativeEffectConcern>(targetConcernInstance, global::Company.RICT.NegativeEffectConcern.TargetConcernDomainRoleId);
		}
		#endregion
		#region NegativeEffectConcern instance accessors
		
		/// <summary>
		/// Get any NegativeEffectConcern links between a given Concern and a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT.NegativeEffectConcern> GetLinks( global::Company.RICT.Concern source, global::Company.RICT.Concern target )
		{
			global::System.Collections.Generic.List<global::Company.RICT.NegativeEffectConcern> outLinks = new global::System.Collections.Generic.List<global::Company.RICT.NegativeEffectConcern>();
			global::System.Collections.Generic.IList<global::Company.RICT.NegativeEffectConcern> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT.NegativeEffectConcern>(source, global::Company.RICT.NegativeEffectConcern.SourceConcernDomainRoleId);
			foreach ( global::Company.RICT.NegativeEffectConcern link in links )
			{
				if ( target.Equals(link.TargetConcern) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one NegativeEffectConcern link between a given Concernand a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.RICT.NegativeEffectConcern GetLink( global::Company.RICT.Concern source, global::Company.RICT.Concern target )
		{
			global::System.Collections.Generic.IList<global::Company.RICT.NegativeEffectConcern> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT.NegativeEffectConcern>(source, global::Company.RICT.NegativeEffectConcern.SourceConcernDomainRoleId);
			foreach ( global::Company.RICT.NegativeEffectConcern link in links )
			{
				if ( target.Equals(link.TargetConcern) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.RICT
{
	/// <summary>
	/// DomainRelationship UndecidedEffectSA
	/// Description for Company.RICT.UndecidedEffectSA
	/// </summary>
	[DslDesign::DisplayNameResource("Company.RICT.UndecidedEffectSA.DisplayName", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.RICT.UndecidedEffectSA.Description", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.RICT.RICTDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("827d6c8a-8d69-4990-8ea9-2a79c5f87cc7")]
	public partial class UndecidedEffectSA : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// UndecidedEffectSA domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x827d6c8a, 0x8d69, 0x4990, 0x8e, 0xa9, 0x2a, 0x79, 0xc5, 0xf8, 0x7c, 0xc7);
	
				
		/// <summary>
		/// Constructor
		/// Creates a UndecidedEffectSA link in the same Partition as the given SoftwareArchitecture
		/// </summary>
		/// <param name="source">SoftwareArchitecture to use as the source of the relationship.</param>
		/// <param name="target">Concern to use as the target of the relationship.</param>
		public UndecidedEffectSA(SoftwareArchitecture source, Concern target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(UndecidedEffectSA.SoftwareArchitectureDomainRoleId, source), new DslModeling::RoleAssignment(UndecidedEffectSA.ConcernDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UndecidedEffectSA(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UndecidedEffectSA(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UndecidedEffectSA(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UndecidedEffectSA(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SoftwareArchitecture domain role code
		
		/// <summary>
		/// SoftwareArchitecture domain role Id.
		/// </summary>
		public static readonly global::System.Guid SoftwareArchitectureDomainRoleId = new global::System.Guid(0x59873ec1, 0xc467, 0x41c8, 0xa2, 0xec, 0x1e, 0xa1, 0xf0, 0x82, 0x79, 0x1e);
		
		/// <summary>
		/// DomainRole SoftwareArchitecture
		/// Description for Company.RICT.UndecidedEffectSA.SoftwareArchitecture
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT.UndecidedEffectSA/SoftwareArchitecture.DisplayName", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT.UndecidedEffectSA/SoftwareArchitecture.Description", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetConcerns4", PropertyDisplayNameKey="Company.RICT.UndecidedEffectSA/SoftwareArchitecture.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("59873ec1-c467-41c8-a2ec-1ea1f082791e")]
		public virtual SoftwareArchitecture SoftwareArchitecture
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SoftwareArchitecture)DslModeling::DomainRoleInfo.GetRolePlayer(this, SoftwareArchitectureDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SoftwareArchitectureDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SoftwareArchitecture1 of a Concern
		/// <summary>
		/// Gets SoftwareArchitecture1.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SoftwareArchitecture GetSoftwareArchitecture1(Concern element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConcernDomainRoleId) as SoftwareArchitecture;
		}
		
		/// <summary>
		/// Sets SoftwareArchitecture1.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSoftwareArchitecture1(Concern element, SoftwareArchitecture newSoftwareArchitecture)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConcernDomainRoleId, newSoftwareArchitecture);
		}
		#endregion
		#region Concern domain role code
		
		/// <summary>
		/// Concern domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConcernDomainRoleId = new global::System.Guid(0x1379ba8d, 0xa888, 0x44e6, 0xa1, 0x30, 0x5c, 0xf9, 0x7b, 0xf2, 0xb1, 0x8f);
		
		/// <summary>
		/// DomainRole Concern
		/// Description for Company.RICT.UndecidedEffectSA.Concern
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT.UndecidedEffectSA/Concern.DisplayName", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT.UndecidedEffectSA/Concern.Description", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SoftwareArchitecture1", PropertyDisplayNameKey="Company.RICT.UndecidedEffectSA/Concern.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("1379ba8d-a888-44e6-a130-5cf97bf2b18f")]
		public virtual Concern Concern
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Concern)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConcernDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConcernDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetConcerns4 of a SoftwareArchitecture
		/// <summary>
		/// Gets a list of TargetConcerns4.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Concern> GetTargetConcerns4(SoftwareArchitecture element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Concern>, Concern>(element, SoftwareArchitectureDomainRoleId);
		}
		#endregion
		#region SoftwareArchitecture link accessor
		/// <summary>
		/// Get the list of UndecidedEffectSA links to a SoftwareArchitecture.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT.UndecidedEffectSA> GetLinksToTargetConcerns4 ( global::Company.RICT.SoftwareArchitecture softwareArchitectureInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT.UndecidedEffectSA>(softwareArchitectureInstance, global::Company.RICT.UndecidedEffectSA.SoftwareArchitectureDomainRoleId);
		}
		#endregion
		#region Concern link accessor
		/// <summary>
		/// Get the UndecidedEffectSA link to a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.RICT.UndecidedEffectSA GetLinkToSoftwareArchitecture1 (global::Company.RICT.Concern concernInstance)
		{
			global::System.Collections.Generic.IList<global::Company.RICT.UndecidedEffectSA> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT.UndecidedEffectSA>(concernInstance, global::Company.RICT.UndecidedEffectSA.ConcernDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Concern not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region UndecidedEffectSA instance accessors
		
		/// <summary>
		/// Get any UndecidedEffectSA links between a given SoftwareArchitecture and a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT.UndecidedEffectSA> GetLinks( global::Company.RICT.SoftwareArchitecture source, global::Company.RICT.Concern target )
		{
			global::System.Collections.Generic.List<global::Company.RICT.UndecidedEffectSA> outLinks = new global::System.Collections.Generic.List<global::Company.RICT.UndecidedEffectSA>();
			global::System.Collections.Generic.IList<global::Company.RICT.UndecidedEffectSA> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT.UndecidedEffectSA>(source, global::Company.RICT.UndecidedEffectSA.SoftwareArchitectureDomainRoleId);
			foreach ( global::Company.RICT.UndecidedEffectSA link in links )
			{
				if ( target.Equals(link.Concern) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one UndecidedEffectSA link between a given SoftwareArchitectureand a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.RICT.UndecidedEffectSA GetLink( global::Company.RICT.SoftwareArchitecture source, global::Company.RICT.Concern target )
		{
			global::System.Collections.Generic.IList<global::Company.RICT.UndecidedEffectSA> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT.UndecidedEffectSA>(source, global::Company.RICT.UndecidedEffectSA.SoftwareArchitectureDomainRoleId);
			foreach ( global::Company.RICT.UndecidedEffectSA link in links )
			{
				if ( target.Equals(link.Concern) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.RICT
{
	/// <summary>
	/// DomainRelationship PositiveEffectSA
	/// Description for Company.RICT.PositiveEffectSA
	/// </summary>
	[DslDesign::DisplayNameResource("Company.RICT.PositiveEffectSA.DisplayName", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.RICT.PositiveEffectSA.Description", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.RICT.RICTDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("da23ad4e-bce4-4dcf-bfd4-b265208bf37d")]
	public partial class PositiveEffectSA : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// PositiveEffectSA domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xda23ad4e, 0xbce4, 0x4dcf, 0xbf, 0xd4, 0xb2, 0x65, 0x20, 0x8b, 0xf3, 0x7d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a PositiveEffectSA link in the same Partition as the given SoftwareArchitecture
		/// </summary>
		/// <param name="source">SoftwareArchitecture to use as the source of the relationship.</param>
		/// <param name="target">Concern to use as the target of the relationship.</param>
		public PositiveEffectSA(SoftwareArchitecture source, Concern target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(PositiveEffectSA.SoftwareArchitectureDomainRoleId, source), new DslModeling::RoleAssignment(PositiveEffectSA.ConcernDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PositiveEffectSA(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PositiveEffectSA(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PositiveEffectSA(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PositiveEffectSA(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SoftwareArchitecture domain role code
		
		/// <summary>
		/// SoftwareArchitecture domain role Id.
		/// </summary>
		public static readonly global::System.Guid SoftwareArchitectureDomainRoleId = new global::System.Guid(0xcff35663, 0xb68c, 0x4bf0, 0xbe, 0xf7, 0xd2, 0xcb, 0xac, 0xe5, 0x74, 0xdc);
		
		/// <summary>
		/// DomainRole SoftwareArchitecture
		/// Description for Company.RICT.PositiveEffectSA.SoftwareArchitecture
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT.PositiveEffectSA/SoftwareArchitecture.DisplayName", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT.PositiveEffectSA/SoftwareArchitecture.Description", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetConcerns5", PropertyDisplayNameKey="Company.RICT.PositiveEffectSA/SoftwareArchitecture.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("cff35663-b68c-4bf0-bef7-d2cbace574dc")]
		public virtual SoftwareArchitecture SoftwareArchitecture
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SoftwareArchitecture)DslModeling::DomainRoleInfo.GetRolePlayer(this, SoftwareArchitectureDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SoftwareArchitectureDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SoftwareArchitecture2 of a Concern
		/// <summary>
		/// Gets SoftwareArchitecture2.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SoftwareArchitecture GetSoftwareArchitecture2(Concern element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConcernDomainRoleId) as SoftwareArchitecture;
		}
		
		/// <summary>
		/// Sets SoftwareArchitecture2.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSoftwareArchitecture2(Concern element, SoftwareArchitecture newSoftwareArchitecture)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConcernDomainRoleId, newSoftwareArchitecture);
		}
		#endregion
		#region Concern domain role code
		
		/// <summary>
		/// Concern domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConcernDomainRoleId = new global::System.Guid(0x5cc629b0, 0x00de, 0x4913, 0x94, 0xfa, 0xa2, 0x02, 0x69, 0x9e, 0xdb, 0x69);
		
		/// <summary>
		/// DomainRole Concern
		/// Description for Company.RICT.PositiveEffectSA.Concern
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT.PositiveEffectSA/Concern.DisplayName", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT.PositiveEffectSA/Concern.Description", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SoftwareArchitecture2", PropertyDisplayNameKey="Company.RICT.PositiveEffectSA/Concern.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("5cc629b0-00de-4913-94fa-a202699edb69")]
		public virtual Concern Concern
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Concern)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConcernDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConcernDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetConcerns5 of a SoftwareArchitecture
		/// <summary>
		/// Gets a list of TargetConcerns5.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Concern> GetTargetConcerns5(SoftwareArchitecture element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Concern>, Concern>(element, SoftwareArchitectureDomainRoleId);
		}
		#endregion
		#region SoftwareArchitecture link accessor
		/// <summary>
		/// Get the list of PositiveEffectSA links to a SoftwareArchitecture.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT.PositiveEffectSA> GetLinksToTargetConcerns5 ( global::Company.RICT.SoftwareArchitecture softwareArchitectureInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT.PositiveEffectSA>(softwareArchitectureInstance, global::Company.RICT.PositiveEffectSA.SoftwareArchitectureDomainRoleId);
		}
		#endregion
		#region Concern link accessor
		/// <summary>
		/// Get the PositiveEffectSA link to a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.RICT.PositiveEffectSA GetLinkToSoftwareArchitecture2 (global::Company.RICT.Concern concernInstance)
		{
			global::System.Collections.Generic.IList<global::Company.RICT.PositiveEffectSA> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT.PositiveEffectSA>(concernInstance, global::Company.RICT.PositiveEffectSA.ConcernDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Concern not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PositiveEffectSA instance accessors
		
		/// <summary>
		/// Get any PositiveEffectSA links between a given SoftwareArchitecture and a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT.PositiveEffectSA> GetLinks( global::Company.RICT.SoftwareArchitecture source, global::Company.RICT.Concern target )
		{
			global::System.Collections.Generic.List<global::Company.RICT.PositiveEffectSA> outLinks = new global::System.Collections.Generic.List<global::Company.RICT.PositiveEffectSA>();
			global::System.Collections.Generic.IList<global::Company.RICT.PositiveEffectSA> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT.PositiveEffectSA>(source, global::Company.RICT.PositiveEffectSA.SoftwareArchitectureDomainRoleId);
			foreach ( global::Company.RICT.PositiveEffectSA link in links )
			{
				if ( target.Equals(link.Concern) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one PositiveEffectSA link between a given SoftwareArchitectureand a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.RICT.PositiveEffectSA GetLink( global::Company.RICT.SoftwareArchitecture source, global::Company.RICT.Concern target )
		{
			global::System.Collections.Generic.IList<global::Company.RICT.PositiveEffectSA> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT.PositiveEffectSA>(source, global::Company.RICT.PositiveEffectSA.SoftwareArchitectureDomainRoleId);
			foreach ( global::Company.RICT.PositiveEffectSA link in links )
			{
				if ( target.Equals(link.Concern) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.RICT
{
	/// <summary>
	/// DomainRelationship NegativeEffectSA
	/// Description for Company.RICT.NegativeEffectSA
	/// </summary>
	[DslDesign::DisplayNameResource("Company.RICT.NegativeEffectSA.DisplayName", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.RICT.NegativeEffectSA.Description", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.RICT.RICTDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("4d794c74-dfa3-4ef2-8f84-2c62c2e881e5")]
	public partial class NegativeEffectSA : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// NegativeEffectSA domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4d794c74, 0xdfa3, 0x4ef2, 0x8f, 0x84, 0x2c, 0x62, 0xc2, 0xe8, 0x81, 0xe5);
	
				
		/// <summary>
		/// Constructor
		/// Creates a NegativeEffectSA link in the same Partition as the given SoftwareArchitecture
		/// </summary>
		/// <param name="source">SoftwareArchitecture to use as the source of the relationship.</param>
		/// <param name="target">Concern to use as the target of the relationship.</param>
		public NegativeEffectSA(SoftwareArchitecture source, Concern target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(NegativeEffectSA.SoftwareArchitectureDomainRoleId, source), new DslModeling::RoleAssignment(NegativeEffectSA.ConcernDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public NegativeEffectSA(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public NegativeEffectSA(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public NegativeEffectSA(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public NegativeEffectSA(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SoftwareArchitecture domain role code
		
		/// <summary>
		/// SoftwareArchitecture domain role Id.
		/// </summary>
		public static readonly global::System.Guid SoftwareArchitectureDomainRoleId = new global::System.Guid(0xf82f29bf, 0xf633, 0x4f9d, 0x80, 0x90, 0x6e, 0xe4, 0x84, 0x9f, 0x6d, 0x99);
		
		/// <summary>
		/// DomainRole SoftwareArchitecture
		/// Description for Company.RICT.NegativeEffectSA.SoftwareArchitecture
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT.NegativeEffectSA/SoftwareArchitecture.DisplayName", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT.NegativeEffectSA/SoftwareArchitecture.Description", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetConcerns6", PropertyDisplayNameKey="Company.RICT.NegativeEffectSA/SoftwareArchitecture.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f82f29bf-f633-4f9d-8090-6ee4849f6d99")]
		public virtual SoftwareArchitecture SoftwareArchitecture
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SoftwareArchitecture)DslModeling::DomainRoleInfo.GetRolePlayer(this, SoftwareArchitectureDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SoftwareArchitectureDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SoftwareArchitecture3 of a Concern
		/// <summary>
		/// Gets SoftwareArchitecture3.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SoftwareArchitecture GetSoftwareArchitecture3(Concern element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConcernDomainRoleId) as SoftwareArchitecture;
		}
		
		/// <summary>
		/// Sets SoftwareArchitecture3.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSoftwareArchitecture3(Concern element, SoftwareArchitecture newSoftwareArchitecture)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConcernDomainRoleId, newSoftwareArchitecture);
		}
		#endregion
		#region Concern domain role code
		
		/// <summary>
		/// Concern domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConcernDomainRoleId = new global::System.Guid(0xa388e045, 0xe1da, 0x4195, 0x9c, 0xa9, 0xa1, 0x6c, 0x26, 0x4b, 0x84, 0x1e);
		
		/// <summary>
		/// DomainRole Concern
		/// Description for Company.RICT.NegativeEffectSA.Concern
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT.NegativeEffectSA/Concern.DisplayName", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT.NegativeEffectSA/Concern.Description", typeof(global::Company.RICT.RICTDomainModel), "Company.RICT.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SoftwareArchitecture3", PropertyDisplayNameKey="Company.RICT.NegativeEffectSA/Concern.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("a388e045-e1da-4195-9ca9-a16c264b841e")]
		public virtual Concern Concern
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Concern)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConcernDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConcernDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetConcerns6 of a SoftwareArchitecture
		/// <summary>
		/// Gets a list of TargetConcerns6.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Concern> GetTargetConcerns6(SoftwareArchitecture element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Concern>, Concern>(element, SoftwareArchitectureDomainRoleId);
		}
		#endregion
		#region SoftwareArchitecture link accessor
		/// <summary>
		/// Get the list of NegativeEffectSA links to a SoftwareArchitecture.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT.NegativeEffectSA> GetLinksToTargetConcerns6 ( global::Company.RICT.SoftwareArchitecture softwareArchitectureInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT.NegativeEffectSA>(softwareArchitectureInstance, global::Company.RICT.NegativeEffectSA.SoftwareArchitectureDomainRoleId);
		}
		#endregion
		#region Concern link accessor
		/// <summary>
		/// Get the NegativeEffectSA link to a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.RICT.NegativeEffectSA GetLinkToSoftwareArchitecture3 (global::Company.RICT.Concern concernInstance)
		{
			global::System.Collections.Generic.IList<global::Company.RICT.NegativeEffectSA> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT.NegativeEffectSA>(concernInstance, global::Company.RICT.NegativeEffectSA.ConcernDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Concern not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region NegativeEffectSA instance accessors
		
		/// <summary>
		/// Get any NegativeEffectSA links between a given SoftwareArchitecture and a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT.NegativeEffectSA> GetLinks( global::Company.RICT.SoftwareArchitecture source, global::Company.RICT.Concern target )
		{
			global::System.Collections.Generic.List<global::Company.RICT.NegativeEffectSA> outLinks = new global::System.Collections.Generic.List<global::Company.RICT.NegativeEffectSA>();
			global::System.Collections.Generic.IList<global::Company.RICT.NegativeEffectSA> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT.NegativeEffectSA>(source, global::Company.RICT.NegativeEffectSA.SoftwareArchitectureDomainRoleId);
			foreach ( global::Company.RICT.NegativeEffectSA link in links )
			{
				if ( target.Equals(link.Concern) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one NegativeEffectSA link between a given SoftwareArchitectureand a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.RICT.NegativeEffectSA GetLink( global::Company.RICT.SoftwareArchitecture source, global::Company.RICT.Concern target )
		{
			global::System.Collections.Generic.IList<global::Company.RICT.NegativeEffectSA> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT.NegativeEffectSA>(source, global::Company.RICT.NegativeEffectSA.SoftwareArchitectureDomainRoleId);
			foreach ( global::Company.RICT.NegativeEffectSA link in links )
			{
				if ( target.Equals(link.Concern) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
